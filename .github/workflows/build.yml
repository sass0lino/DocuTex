name: Build LaTeX documents

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - 'src/**/*.tex'
      - 'docs/**/*.pdf'

jobs:
  build_latex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step 1 - Enforce Consistency (Cleanup)
        id: analysis
        run: |
          echo "--- Enforcing repository consistency ---"
          BEFORE_SHA="${{ github.event.before }}"; AFTER_SHA="${{ github.event.after }}"
          
          # 1. Pulizia PDF Orfani (Controllo di stato generale)
          if [ -d "docs" ]; then
            find docs -type f -name "*.pdf" | while IFS= read -r pdf_file; do
              src_file=$(echo "$pdf_file" | sed 's|^docs/|src/|; s|\.pdf$|\.tex|')
              if [ ! -f "$src_file" ]; then echo "Orphan PDF found. Deleting: $pdf_file"; rm "$pdf_file"; fi
            done
          fi

          # 2. Pulizia Anti-Manomissione (PDF aggiunti dall'utente)
          if [[ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" ]]; then
            manually_changed_pdfs=$(git diff --name-only --diff-filter=AMR "$BEFORE_SHA" "$AFTER_SHA" -- 'docs/**/*.pdf' || true)
            if [ -n "$manually_changed_pdfs" ]; then
              echo "--> Detected manually added/modified/renamed PDFs. Deleting them:"
              echo "$manually_changed_pdfs" | xargs -r rm -f
            fi
          fi

      - name: Step 2 - Prepare Compile List (Unification)
        id: prepare
        run: |
          echo "--- Preparing compile list ---"
          BEFORE_SHA="${{ github.event.before }}"; AFTER_SHA="${{ github.event.after }}"
          
          # Fonte 1: File modificati nel push
          changed_parents=""
          if [[ "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ]]; then
            changed_files=$(git ls-tree --name-only -r "$AFTER_SHA" | grep '\.tex$' || true)
          else
            changed_files=$(git diff --name-only --diff-filter=AMR "$BEFORE_SHA" "$AFTER_SHA" -- 'src/**/*.tex' || true)
          fi
          if [ -n "$changed_files" ]; then
            while IFS= read -r file; do
              if [[ "$file" == *"/contenuti/"* ]]; then
                parent_dir=$(echo "$file" | sed 's|/contenuti/.*||'); find "$parent_dir" -maxdepth 1 -type f -name "*.tex"
              else
                echo "$file"
              fi
            done < <(echo "$changed_files") | sort -u > changed_parents.txt
            changed_parents=$(cat changed_parents.txt)
          fi
          
          # Fonte 2: Lo Scanner (con la correzione del bug subshell)
          missing_pdfs_list=""
          # CORREZIONE: Usa < <(...) per evitare il subshell e preservare la variabile
          while IFS= read -r tex_file; do
            pdf_file=$(echo "$tex_file" | sed 's|^src/|docs/|; s|\.tex$|\.pdf|')
            if [ ! -f "$pdf_file" ]; then
              missing_pdfs_list="$missing_pdfs_list\n$tex_file"
            fi
          done < <(find src -type f -name "*.tex" | grep -v '/contenuti/')
          
          # Unisce le due fonti in una lista unica
          master_compile_list=$(echo -e "$changed_parents\n$missing_pdfs_list" | sed '/^$/d' | sort -u)

          if [ -z "$master_compile_list" ]; then
            echo "No .tex files to compile."; echo "compile_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Final list of files to compile:"; echo "$master_compile_list"
            echo "$master_compile_list" > compile_list.txt; echo "compile_needed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Step 3 - Compile and Generate Build Report
        if: steps.prepare.outputs.compile_needed == 'true'
        run: |
          # (Logica di compilazione e report invariata)
          echo "# Build Report del $(date -u --iso-8601=seconds)" > build_report.log
          cat compile_list.txt | while IFS= read -r file_to_compile; do
            pdf_to_delete=$(echo "$file_to_compile" | sed 's|^src/|docs/|; s|\.tex$|\.pdf|')
            if [ -f "$pdf_to_delete" ]; then echo "Preemptively deleting: $pdf_to_delete"; rm -f "$pdf_to_delete"; fi
          done
          docker run --rm --volume "$(pwd)":"$(pwd)" --workdir "$(pwd)" -e GITHUB_SHA ghcr.io/xu-cheng/texlive-full:latest /bin/bash -c "
            cat compile_list.txt | while IFS= read -r final_file; do
              if latexmk -pdf -cd -interaction=nonstopmode -file-line-error -output-directory=\"\$(pwd)/tmp_build\" \"\$(pwd)/\$final_file\"; then
                filepath=\$(dirname \"\$final_file\"); filename=\$(basename \"\$final_file\" .tex); output_subpath=\$(echo \"\$filepath\" | sed 's|^src/||; s|^src\$||')
                output_dir=\"\$(pwd)/docs/\$output_subpath\"; mkdir -p \"\$output_dir\"
                mv \"\$(pwd)/tmp_build/\$filename.pdf\" \"\$output_dir/\"
                echo \"\$final_file;Successo\" >> build_report.log
              else
                echo \"::error file=\$final_file::LaTeX compilation failed.\"
                echo \"\$final_file;Fallimento;\$GITHUB_SHA\" >> build_report.log
              fi; rm -rf \"\$(pwd)/tmp_build\"
            done
          "

      - name: Step 4 - Final Commit
        run: |
          # (Logica di commit invariata)
          echo "--- Committing changes ---"
          touch build_report.log
          git add docs build_report.log
          if git diff --staged --quiet; then
            echo "No changes in docs or build report to commit."
          else
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Automated LaTeX compilation and build report"
            git push
          fi
